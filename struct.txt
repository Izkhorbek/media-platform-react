Ajoyib! Quyida **React loyihasi uchun professional `starter` struktura** va `boilerplate` misol keltiraman. Bu sizga har doim toza, kengaytiriladigan va maintainable frontend tuzishda yordam beradi.

---

## **1. Loyihaning Umumiy Struktura Misoli:**

```
my-app/
├── public/
│   └── index.html
├── src/
│   ├── assets/              # Rasmlar, fontlar, umumiy fayllar
│   ├── components/          # Umumiy qayta ishlatiladigan komponentlar (Button, Modal, Card)
│   ├── features/            # Har bir sahifa yoki modul uchun feature-based folder
│   │   └── products/
│   │       ├── ProductList.jsx
│   │       ├── ProductDetails.jsx
│   │       ├── productSlice.js        # (Agar Redux Toolkit ishlatsa)
│   │       └── productService.js
│   ├── hooks/               # Custom hooklar (`useAuth`, `useFetch`, ...)
│   ├── layouts/             # Layoutlar (Header, Footer, Sidebar bilan)
│   ├── pages/               # React Router sahifalar
│   │   └── Home.jsx
│   │   └── ProductPage.jsx
│   ├── router/              # `react-router` konfiguratsiyasi
│   │   └── AppRouter.jsx
│   ├── store/               # Redux yoki zustand store
│   │   └── index.js
│   ├── utils/               # Helper funksiyalar
│   ├── App.jsx
│   └── main.jsx             # Vite uchun entry file (ReactDOM.render)
├── .env                     # API_KEY va boshqalar
├── package.json
└── README.md
```

---

## **2. Texnologiyalar To'plami (Boilerplate Stack):**

| Bo'lim     | Tavsiya                                              |
| ---------- | ---------------------------------------------------- |
| Bundler    | [Vite](https://vitejs.dev/) (tez va yengil) yoki CRA |
| Router     | React Router DOM                                     |
| State      | Redux Toolkit yoki Zustand                           |
| Styles     | TailwindCSS yoki Styled Components                   |
| HTTP       | Axios (API chaqirish uchun)                          |
| Form       | React Hook Form                                      |
| Toast      | React Toastify                                       |
| Auth       | JWT (login/session) bilan Context yoki Redux orqali  |
| Testing    | Jest + React Testing Library                         |
| TypeScript | (Agar loyiha katta bo‘lsa)                           |

---

## **3. Starter Kod Bo’lagi (`main.jsx` va `App.jsx`)**

### `main.jsx`:

```jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);
```

### `App.jsx`:

```jsx
import React from 'react';
import AppRouter from './router/AppRouter';
import Header from './layouts/Header';
import Footer from './layouts/Footer';

function App() {
  return (
    <>
      <Header />
      <AppRouter />
      <Footer />
    </>
  );
}

export default App;
```

---

## **4. Router (`AppRouter.jsx`)**

```jsx
import { Routes, Route } from 'react-router-dom';
import Home from '../pages/Home';
import ProductPage from '../pages/ProductPage';

export default function AppRouter() {
  return (
    <Routes>
      <Route path="/" element={<Home />} />
      <Route path="/products" element={<ProductPage />} />
    </Routes>
  );
}
```

---

## **5. Custom Hook Misoli (`useFetch.js`)**

```jsx
import { useEffect, useState } from 'react';
import axios from 'axios';

export function useFetch(url) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    axios.get(url).then((res) => {
      setData(res.data);
      setLoading(false);
    });
  }, [url]);

  return { data, loading };
}
```

---

## **6. API Service (`productService.js`)**

```jsx
import axios from 'axios';

const API_BASE = import.meta.env.VITE_API_URL || "https://fakestoreapi.com";

export const getProducts = () => axios.get(`${API_BASE}/products`);
```

---

## Yordamchi tavsiyalar:

| Qism              | Tavsiya                                                      |
| ----------------- | ------------------------------------------------------------ |
| ESLint + Prettier | Kodingizni avtomatik tozalash va tekshirish                  |
| Git branch'lar    | `feature/`, `bugfix/`, `release/` branch strategiyasi        |
| `.env`            | API kalitlarini `VITE_API_URL`, `VITE_AUTH_KEY` kabi saqlash |
| Readme.md         | Loyihani tushuntirib yozish, ishlash tartibi bilan           |

---

Agar sizga **to‘liq ishlaydigan GitHub repositoriy** yoki **shablon starter** kerak bo‘lsa, siz uchun maxsus tayyorlab yuborishim mumkin. Qanday stack bilan xohlaysiz? Masalan:

* `React + Tailwind + React Router + Axios`
* `React + Redux Toolkit + Styled Components`
* `React + Zustand + React Hook Form`

Qaysi birini tanlaysiz yoki o'zingizning stack’ingizni ayting — men siz uchun moslashtirib beraman.
